/**
 * @packageDocumentation
 * @module api.functional.sock
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import { WebSocketConnector } from "tgrid";
import type { Driver } from "tgrid";
import typia from "typia";

/**
 * @controller SockController.test
 * @path GET /sock/test
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function test(connection: IConnection): Promise<test.Output> {
  return !!connection.simulate
    ? test.simulate(connection)
    : PlainFetcher.fetch(connection, {
        ...test.METADATA,
        path: test.path(),
      });
}
export namespace test {
  export type Output = number[];

  export const METADATA = {
    method: "GET",
    path: "/sock/test",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/sock/test";
  export const random = (g?: Partial<typia.IRandomGenerator>): number[] =>
    typia.random<number[]>(g);
  export const simulate = (connection: IConnection): Output => {
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * @controller SockController.calc
 * @path /sock/calc
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function calc(
  connection: IConnection<calc.Header>,
  provider: calc.Provider,
): Promise<calc.Output> {
  const connector: WebSocketConnector<
    calc.Header,
    calc.Provider,
    calc.Listener
  > = new WebSocketConnector(connection.headers ?? ({} as any), provider);
  await connector.connect(
    `${connection.host.endsWith("/") ? connection.host.substring(0, connection.host.length - 1) : connection.host}${calc.path()}`,
  );
  const driver: Driver<calc.Listener> = connector.getDriver();
  return {
    connector,
    driver,
  };
}
export namespace calc {
  export type Output = {
    connector: WebSocketConnector<Header, Provider, Listener>;
    driver: Driver<Listener>;
  };
  export type Header = undefined;
  export type Provider = IListener;
  export type Listener = ICalculator;

  export const path = () => "/sock/calc";
}
